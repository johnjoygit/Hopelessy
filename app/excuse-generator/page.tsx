'use client'

import { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Card, CardContent } from '@/components/ui/card'
import { Loader2, Copy, Share } from 'lucide-react'

export default function ExcuseGeneratorPage() {
  const [excuse, setExcuse] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [history, setHistory] = useState<Array<{excuse: string, timestamp: string}>>([])

  const generateExcuse = async () => {
    setIsLoading(true)
    
    // Simulate API call with pre-generated excuses
    const excuses = [
      "My WiFi is having an existential crisis and refuses to connect to productivity.",
      "I'm allergic to success - it makes me break out in effort.",
      "My motivation went on vacation and forgot to leave a forwarding address.",
      "I'm saving my energy for more important things, like breathing.",
      "My brain is currently buffering at 2% and expected completion time is never.",
      "I'm on a strict diet that excludes all forms of achievement.",
      "My productivity app crashed and took my willpower with it.",
      "I'm practicing the ancient art of strategic procrastination."
    ]
    
    setTimeout(() => {
      const randomExcuse = excuses[Math.floor(Math.random() * excuses.length)]
      setExcuse(randomExcuse)
      
      const newEntry = {
        excuse: randomExcuse,
        timestamp: new Date().toISOString()
      }
      
      setHistory(prev => [newEntry, ...prev.slice(0, 9)])
      setIsLoading(false)
    }, 2000)
  }

  const copyToClipboard = async () => {
    await navigator.clipboard.writeText(excuse)
  }

  const shareExcuse = async () => {
    if (navigator.share) {
      await navigator.share({
        title: 'My AI-Generated Excuse',
        text: excuse,
        url: window.location.href
      })
    } else {
      copyToClipboard()
    }
  }

  return (
    <div className="min-h-screen bg-slate-900 text-white py-8">
      <div className="max-w-4xl mx-auto px-4">
        {/* Header */}
        <div className="text-center mb-12">
          <h1 className="text-5xl font-bold mb-4 bg-gradient-to-r from-orange-400 to-orange-500 bg-clip-text text-transparent">
            Excuse Generator
          </h1>
          <p className="text-xl text-slate-400">Because sometimes you just need a really good excuse</p>
        </div>

        {/* Generate Button */}
        <div className="text-center mb-8">
          <Button 
            onClick={generateExcuse}
            disabled={isLoading}
            className="px-8 py-4 bg-gradient-to-r from-orange-500 to-orange-600 hover:from-orange-600 hover:to-orange-700 text-lg font-semibold"
          >
            {isLoading ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Generating...
              </>
            ) : (
              'Generate My Excuse'
            )}
          </Button>
        </div>

        {/* Output */}
        <Card className="bg-slate-800/50 border-slate-700 mb-8">
          <CardContent className="p-8 text-center">
            {isLoading ? (
              <div className="text-slate-400">
                <Loader2 className="mx-auto mb-4 h-8 w-8 animate-spin" />
                <p>AI is crafting your perfect excuse...</p>
              </div>
            ) : excuse ? (
              <div>
                <div className="text-4xl mb-4">üé≠</div>
                <p className="text-lg text-slate-200 mb-4 font-medium">"{excuse}"</p>
                <div className="text-sm text-slate-400">
                  Generated by AI ‚Ä¢ {new Date().toLocaleTimeString()}
                </div>
              </div>
            ) : (
              <div>
                <div className="text-4xl mb-4">üé≠</div>
                <p className="text-slate-400">Click the button above to generate your perfect excuse</p>
              </div>
            )}
          </CardContent>
        </Card>

        {/* Action Buttons */}
        {excuse && (
          <div className="flex justify-center space-x-4 mb-8">
            <Button onClick={copyToClipboard} variant="outline" className="border-slate-600 hover:bg-slate-700">
              <Copy className="mr-2 h-4 w-4" />
              Copy Excuse
            </Button>
            <Button onClick={shareExcuse} variant="outline" className="border-slate-600 hover:bg-slate-700">
              <Share className="mr-2 h-4 w-4" />
              Share
            </Button>
          </div>
        )}

        {/* History */}
        <Card className="bg-slate-800/30 border-slate-700">
          <CardContent className="p-6">
            <h3 className="text-xl font-semibold mb-4 text-orange-400">Recent Excuses</h3>
            <div className="space-y-4">
              {history.length === 0 ? (
                <div className="text-center text-slate-400 py-8">
                  <div className="text-2xl mb-2">üìù</div>
                  <p>No excuses generated yet. Start creating!</p>
                </div>
              ) : (
                history.map((entry, index) => (
                  <div key={index} className="bg-slate-700/50 rounded-lg p-4 border border-slate-600 hover:border-orange-500/50 transition-colors">
                    <div className="flex justify-between items-start mb-2">
                      <span className="text-xs text-slate-500">{new Date(entry.timestamp).toLocaleDateString()}</span>
                    </div>
                    <p className="text-slate-200 mb-2">"{entry.excuse}"</p>
                    <Button 
                      onClick={() => navigator.clipboard.writeText(entry.excuse)}
                      variant="ghost" 
                      size="sm"
                      className="text-orange-400 hover:text-orange-300 p-0 h-auto"
                    >
                      Copy
                    </Button>
                  </div>
                ))
              )}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
